@using SmsTrackingModels
@model SmsWeb.Models.CoordinatorOverview

@{
    ViewBag.Title = "SMS History : " + Model.Topic;
    Layout = "~/Views/shared/_BootstrapLayout.basic.cshtml";
}

@Styles.Render("~/Content/themes/base/jquery-ui.css")
<script type="text/javascript" src="~/Scripts/jquery-ui-timepicker-addon.js" ></script>
<script type="text/javascript" src="~/Scripts/jstz-1.0.4.min.js"></script>
<script type="text/javascript" src="~/Scripts/tinysort-1.5.2.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>

<script type="text/javascript">
    $(function () {

        $('input[name="timeToResume"]').datetimepicker({ dateFormat: 'dd/mm/yy' });
        $('input[name="finishTime"]').datetimepicker({ dateFormat: 'dd/mm/yy' });
        $('#UserTimeZone').val(jstz.determine().name());

        var schedule = $.connection.scheduleStatus;

        //schedule.client.updateSchedule = function (message) {
        //    addMessageContent(message.ScheduleId, message.Body, message.Class, "2", "icon-time", message.Tooltip);
        //};

        //schedule.client.scheduleSent = function (message) {
        //    var scheduleBody = "Number: " + message.Number + " </br>" +
        //        "Status: Completed Success <br/> " +
        //        "Time Sent: " + message.SentAt + " <br />" +
        //        "Cost: " + message.Cost;
        //    addMessageContent(message.ScheduleId, scheduleBody, message.Class, "4", "icon-ok", message.Tooltip);
        //};
        
        //schedule.client.scheduleFailed = function (message) {
        //    var scheduleBody = "Number: " + message.Number + " </br>" +
        //        "Status: Completed Failure <br/> " +
        //        "Sending Failed: " + message.SendFailedMessage;
        //    addMessageContent(message.ScheduleId, scheduleBody, message.Class, "5", "icon-remove", message.Tooltip);
        //};
        
        //schedule.client.messageScheduled = function (message) {
        //    var scheduleBody = "Number: " + message.Number + " </br>" +
        //        "Status: Scheduled <br/> " +
        //        "Scheduled Time: " + message.ScheduledTime;
        //    addMessageContent(message.ScheduleId, scheduleBody, message.Class, "2", "icon-time", message.Tooltip);
        //};
        
        //schedule.client.messagePaused = function (message) {
            
        //    var scheduleBody = "Number: " + message.Number + " </br>" +
        //        "Status: Paused <br/> ";
        //    addMessageContent(message.ScheduleId, scheduleBody, message.Class, "3", "icon-pause", message.Tooltip);
        //};
        
        schedule.client.coordinatorCompleted = function (message) {
            var coordinatorSummary = "<div>Current Status: Complete</div>" +
                "<div>Completion Date: " + message.CompletedAt + "</div>";
            $('#' + message.CoordinatorId).html(coordinatorSummary);
        };
        
        // Start the connection
        $.connection.hub.start().done(function() {
            $("#broadcast").click(function () {
                // Call the chat method on the server
                status.server.send($('#msg').val());
            });
        });

        $("#pauseForm").submit(function () {
            return confirm("Are you sure you want to pause the current coordinator?");
        });
    });

</script>

<h2>Coordinated Messages</h2>
<div>ID : @Model.CoordinatorId</div>


<div id="@Model.CoordinatorId">
    <div class="control-group">Current Status: @Model.CurrentStatus.ToString()</div>
    @if (Model.CurrentStatus != CoordinatorStatusTracking.Completed)
    {
        if (Model.CurrentStatus == CoordinatorStatusTracking.Started)
        {
            <div>
                @using(Html.BeginForm("Pause", "Coordinator", FormMethod.Post, new { id = "pauseForm" }))
                {
                    @Html.HiddenFor(m => m.CoordinatorId)
                    <input type="submit" value="Pause Message Sending"/>
                }
            </div>
        }
        if (Model.CurrentStatus == CoordinatorStatusTracking.Paused)
        {
            <div>
                @using(Html.BeginForm("Resume", "Coordinator", FormMethod.Post, new { id = "resumeForm" }))
                {
                    @Html.HiddenFor(m => m.CoordinatorId)
                    <div class="control-group">
                        <label>Time to resume</label>
                        @Html.Editor("timeToResume")
                        @Html.ValidationMessage("timeToResume")
                    </div>
                    
                    <div class="control-group">
                        <label>Finish Time (optional)</label>
                        @Html.Editor("finishTime")
                        @Html.ValidationMessage("finishTime")
                        <div><sup>This will update the timing of messages instead of just updating the schedule.</sup></div>
                    </div>
                    @Html.Hidden("UserTimeZone");
                    
                    <input type="submit" value="Resume Messages"/>
                }
            </div>
        }
    }
    @if(Model.CompletionDateUtc.HasValue)
    {
        <div>Completion Date: @Model.CompletionDateUtc.Value.ToLocalTime()</div>

    }
</div>




<fieldset>
    <legend>CoordinatorOverview</legend>


    <div class="display-label">
         @Html.DisplayName("Number of messages")
        @Html.DisplayFor(model => model.MessageCount)
    </div>


    <div class="display-label">
         @Html.DisplayNameFor(model => model.Topic)
        @Html.DisplayFor(model => model.Topic)
    </div>

    <div class="display-label">
         @Html.DisplayName("Message Body")
        @Html.DisplayFor(model => model.MessageBody)
    </div>


    <div>
        <ul>
            @{
                foreach (var statusCounter in Model.StatusCounters.OrderBy(s => s.Status).ToList())
                {
                    if (statusCounter.Status == "Failed")
                    {
                        <li>@Ajax.ActionLink(statusCounter.Status, "ScheduleFailedDetails", "Coordinator", new { coordinatorId = Model.CoordinatorId }, new AjaxOptions { UpdateTargetId = "FailedDetails"}) : @statusCounter.Count </li>
                    }
                    else
                    {
                        <li>@statusCounter.Status : @statusCounter.Count </li>    
                    }
                
                }
            }
        </ul>
    </div>
    
    <div id="FailedDetails"></div>
</fieldset>
