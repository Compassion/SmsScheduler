@using SmsTrackingModels
@model CoordinatorTrackingData

@{
    ViewBag.Title = "title";
    Layout = "~/Views/shared/_BootstrapLayout.basic.cshtml";
}
<script type="text/javascript">
    $(function () {      
        var status = $.connection.scheduleStatus;

        status.client.updateSchedule = function (message) {
            $('#' + message.ScheduleId).html(message.Body);
            $('#' + message.ScheduleId).removeClass();
            $('#' + message.ScheduleId).addClass(message.Class);
        };

        // Start the connection
        $.connection.hub.start().done(function() {
            $("#broadcast").click(function () {
                // Call the chat method on the server
                status.server.send($('#msg').val());
            });
        });
    });
</script>


<h2>Coordinated Messages</h2>
<div>ID : @Model.CoordinatorId</div>
<div>Current Status: @Model.CurrentStatus.ToString()</div>

@if (Model.CurrentStatus != CoordinatorStatusTracking.Completed)
{
    if (Model.CurrentStatus == CoordinatorStatusTracking.Started)
    {
        <div>
            @using(Html.BeginForm("Pause", "Coordinator"))
            {
                @Html.HiddenFor(m => m.CoordinatorId)
                @*<label>Pause message sending</label>*@
                <input type="submit" value="Pause Message Sending"/>
            }
        </div>
    }
    if (Model.CurrentStatus == CoordinatorStatusTracking.Paused)
    {
        <div>
            @using(Html.BeginForm("Resume", "Coordinator"))
            {
                @Html.HiddenFor(m => m.CoordinatorId)
                <label>Time to resume</label>
                <input name="timeToResume" type="datetime-local" value="@DateTime.Now"/>
                <input type="submit" value="Resume Messages"/>
            }
        </div>
    }
}
@if(Model.CompletionDateUtc.HasValue)
{
    <div>Completion Date: @Model.CompletionDateUtc.Value.ToLocalTime()</div>
}
<ul>
@foreach(var message in Model.MessageStatuses)
{
    var liClass = "";
    if (message.Status == MessageStatusTracking.WaitingForScheduling){ liClass = "waitingForSchedule"; }
    if (message.Status == MessageStatusTracking.Scheduled){ liClass = "scheduled"; }
    if (message.Status == MessageStatusTracking.Paused){ liClass = "paused"; }
    if (message.Status == MessageStatusTracking.CompletedSuccess) { liClass = "success"; }
    if (message.Status == MessageStatusTracking.CompletedFailure) { liClass = "fail"; }
    <li class="@liClass" id="@message.ScheduleMessageId">
        Number: @message.Number<br/>
        Status: @message.Status.ToString()<br />
        @switch(message.Status)
        {
            case MessageStatusTracking.CompletedSuccess:
            {
                @: Time Sent: @message.ActualSentTimeUtc.Value.ToLocalTime() <br />
                @: Cost: $@message.Cost <br />
                break;
            }
            case MessageStatusTracking.CompletedFailure:
            {
                @: Sending Failed: <a href="@message.FailureData.MoreInfo">@message.FailureData.Message</a> <br />
                break;
            }
            default:
            {
                @: ScheduledTime: @message.ScheduledSendingTimeUtc.ToLocalTime() <br />
                break;
            }
        }
        
    </li>
}
</ul>