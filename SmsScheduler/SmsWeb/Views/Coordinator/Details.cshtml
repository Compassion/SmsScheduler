@using SmsTrackingModels
@model CoordinatorTrackingData

@functions {public class MessageSimpleStatus
            {
                public string Status { get; set; }

                public string ScheduleId { get; set; }
            }
}

@{
    ViewBag.Title = "SMS History : " + (Model.MetaData == null ? "" : Model.MetaData.Topic);
    Layout = "~/Views/shared/_BootstrapLayout.basic.cshtml";
}

@Styles.Render("~/Content/themes/base/jquery-ui.css")
<script type="text/javascript" src="~/Scripts/jquery-ui-timepicker-addon.js" ></script>
<script type="text/javascript" src="~/Scripts/jstz-1.0.4.min.js"></script>
<script type="text/javascript" src="~/Scripts/tinysort-1.5.2.js"></script>

<script type="text/javascript">
    var displayStatus = "full";
    $(function () {

        $('ul.fullList>li').tsort({ attr: 'class' });
        
        $('input[name="timeToResume"]').datetimepicker({ dateFormat: 'dd/mm/yy' });
        $('input[name="finishTime"]').datetimepicker({ dateFormat: 'dd/mm/yy' });
        $('#UserTimeZone').val(jstz.determine().name());

        $('.fullList > li > a > i').hide();

        $('#hide').click(function () {
            if (displayStatus == "full") {
                renderDetailsCompact();
                displayStatus = "compact";
            } else {
                renderDetailsFull();
                displayStatus = "full";
            }
        });
        
        var schedule = $.connection.scheduleStatus;

        schedule.client.updateSchedule = function (message) {
            addMessageContent(message.ScheduleId, message.Body, message.Class, "2", "icon-time", message.Tooltip);
        };

        schedule.client.scheduleSent = function (message) {
            var scheduleBody = "Number: " + message.Number + " </br>" +
                "Status: Completed Success <br/> " +
                "Time Sent: " + message.SentAt + " <br />" +
                "Cost: " + message.Cost;
            addMessageContent(message.ScheduleId, scheduleBody, message.Class, "4", "icon-ok", message.Tooltip);
        };
        
        schedule.client.scheduleFailed = function (message) {
            var scheduleBody = "Number: " + message.Number + " </br>" +
                "Status: Completed Failure <br/> " +
                "Sending Failed: " + message.SendFailedMessage;
            addMessageContent(message.ScheduleId, scheduleBody, message.Class, "5", "icon-remove", message.Tooltip);
        };
        
        schedule.client.messageScheduled = function (message) {
            var scheduleBody = "Number: " + message.Number + " </br>" +
                "Status: Scheduled <br/> " +
                "Scheduled Time: " + message.ScheduledTime;
            addMessageContent(message.ScheduleId, scheduleBody, message.Class, "2", "icon-time", message.Tooltip);
        };
        
        schedule.client.messagePaused = function (message) {
            
            var scheduleBody = "Number: " + message.Number + " </br>" +
                "Status: Paused <br/> ";
            addMessageContent(message.ScheduleId, scheduleBody, message.Class, "3", "icon-pause", message.Tooltip);
        };
        
        schedule.client.coordinatorCompleted = function (message) {
            var coordinatorSummary = "<div>Current Status: Complete</div>" +
                "<div>Completion Date: " + message.CompletedAt + "</div>";
            $('#' + message.CoordinatorId).html(coordinatorSummary);
        };
        
        // Start the connection
        $.connection.hub.start().done(function() {
            $("#broadcast").click(function () {
                // Call the chat method on the server
                status.server.send($('#msg').val());
            });
        });

        $("#pauseForm").submit(function () {
            return confirm("Are you sure you want to pause the current coordinator?");
        });
    });

    function addMessageContent(scheduleId, content, liClass, messageSchedule, iconClass, tooltip) {
        $('#' + scheduleId).removeClass();
        $('#' + scheduleId).html("<a href='#' rel='tooltip' title='" + tooltip + "'><i class='" + iconClass + "'></i></a><div class='content'>" + content + "</div>");
        $('#' + scheduleId).addClass(liClass);
        $('#' + scheduleId).addClass(messageSchedule);
        
        if (displayStatus == "full") {
            renderDetailsFull();
        } else {
            renderDetailsCompact();
        }
    }

    function renderDetailsFull() {
        $('.content').show();
        $('.compactList').addClass("fullList");
        $('.fullList').removeClass("compactList");
        $('ul.fullList li').removeClass("compact");
        $('#hide').text("Hide Details");
        $('.fullList > li > a > i').hide();
        $('ul.fullList>li').tsort({ attr: 'class' });
    }

    function renderDetailsCompact() {
        $('.content').hide();
        $('.fullList').addClass("compactList");
        $('.compactList').removeClass("fullList");
        $('ul.compactList li').addClass("compact");
        $('#hide').text("Show Details");
        $('.compactList > li > a > i').show();
        $('ul.fullList>li').tsort({ attr: 'class' });
    }
</script>

<h2>Coordinated Messages</h2>
<div>ID : @Model.CoordinatorId</div>

<div id="@Model.CoordinatorId">
    <div class="control-group">Current Status: @Model.CurrentStatus.ToString()</div>
    @if (Model.CurrentStatus != CoordinatorStatusTracking.Completed)
    {
        if (Model.CurrentStatus == CoordinatorStatusTracking.Started)
        {
            <div>
                @using(Html.BeginForm("Pause", "Coordinator", FormMethod.Post, new { id = "pauseForm" }))
                {
                    @Html.HiddenFor(m => m.CoordinatorId)
                    <input type="submit" value="Pause Message Sending"/>
                }
            </div>
        }
        if (Model.CurrentStatus == CoordinatorStatusTracking.Paused)
        {
            <div>
                @using(Html.BeginForm("Resume", "Coordinator", FormMethod.Post, new { id = "resumeForm" }))
                {
                    @Html.HiddenFor(m => m.CoordinatorId)
                    <div class="control-group">
                        <label>Time to resume</label>
                        @Html.Editor("timeToResume")
                        @Html.ValidationMessage("timeToResume")
                    </div>
                    
                    <div class="control-group">
                        <label>Finish Time (optional)</label>
                        @Html.Editor("finishTime")
                        @Html.ValidationMessage("finishTime")
                        <div><sup>This will update the timing of messages instead of just updating the schedule.</sup></div>
                    </div>
                    @Html.Hidden("UserTimeZone");
                    
                    <input type="submit" value="Resume Messages"/>
                }
            </div>
        }
    }
    @if(Model.CompletionDateUtc.HasValue)
    {
        <div>Completion Date: @Model.CompletionDateUtc.Value.ToLocalTime()</div>
        if (Model.MessageStatuses.Sum(m => m.Cost).HasValue)
        {
            var totalCost = Model.MessageStatuses.Sum(m => m.Cost).Value*-1;
            <div>Cost: $@totalCost</div>
        }
        var group = Model.MessageStatuses.GroupBy(m => m.Status);
        foreach (var v in group)
        {
            <div>@v.Key : @v.Count()</div>
        }

    }
</div>
<div class="control-group"><a href="#" id="hide">Hide Details</a></div>
<ul class="fullList">
@foreach(var message in Model.MessageStatuses)
{
    var liClass = "";
    var iconClass = "";
    var tooltip = message.Number;
    if (message.Status == MessageStatusTracking.WaitingForScheduling) { liClass = "1 waitingforschedule"; iconClass = "icon-cog"; }
    if (message.Status == MessageStatusTracking.Scheduled) { liClass = "2 scheduled"; iconClass = "icon-time"; }
    if (message.Status == MessageStatusTracking.Paused) { liClass = "3 paused"; iconClass = "icon-pause"; }
    if (message.Status == MessageStatusTracking.CompletedSuccess) { liClass = "4 success"; iconClass = "icon-ok"; }
    if (message.Status == MessageStatusTracking.CompletedFailure) { liClass = "5 fail"; iconClass = "icon-remove";
        tooltip = tooltip + " " + message.FailureData.Message;
    }
    <li class="@liClass" id="@message.ScheduleMessageId">
        <a href="#" rel="tooltip" title="@tooltip">
            <i class="@iconClass"></i>
        </a>
        <div class="content">
            Number: @message.Number<br/>
            Status: @message.Status.ToString()<br />
            @switch(message.Status)
            {
                case MessageStatusTracking.CompletedSuccess:
                    {
                        @: Time Sent: @message.ActualSentTimeUtc.Value.ToLocalTime() <br />
                        @: Cost: $@message.Cost <br />
                        break;
                    }
                case MessageStatusTracking.CompletedFailure:
                    {
                        @: Sending Failed: <a href="@message.FailureData.MoreInfo">@message.FailureData.Message</a> <br />
                        break;
                    }
                default:
                    {
                        @: ScheduledTime: @message.ScheduledSendingTimeUtc.ToLocalTime() <br />
                        break;
                    }
            }
        </div>
    </li>
}
</ul>