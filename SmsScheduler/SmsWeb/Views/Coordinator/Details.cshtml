@using SmsTracking
@model SmsTracking.CoordinatorTrackingData

@{
    ViewBag.Title = "title";
}

<h2>Coordinated Messages</h2>
<div>ID : @Model.CoordinatorId</div>
<div>Current Status: @Model.CurrentStatus.ToString()</div>

@if (Model.CurrentStatus != CoordinatorStatusTracking.Completed)
{
    if (Model.CurrentStatus == CoordinatorStatusTracking.Started)
    {
        <div>
            @using(Html.BeginForm("Pause", "Coordinator"))
            {
                @Html.HiddenFor(m => m.CoordinatorId)
                <label>Pause message sending</label>
                <input type="submit" value="go"/>
            }
        </div>
        // show pause button
    }
    if (Model.CurrentStatus == CoordinatorStatusTracking.Paused)
    {
        <div>
            @using(Html.BeginForm("Resume", "Coordinator"))
            {
                @Html.HiddenFor(m => m.CoordinatorId)
                <label>Time to resume</label>
                <input name="timeToResume" type="datetime-local" value="@DateTime.Now"/>
                <input type="submit" value="go"/>
            }
        </div>
        // show resume button
    }
}
@if(Model.CompletionDateUtc.HasValue)
{
    <div>Completion Date: @Model.CompletionDateUtc.Value.ToLocalTime()</div>
}
<ul>
@foreach(var message in Model.MessageStatuses)
{
    var colour = "";
    if (message.Status == MessageStatusTracking.WaitingForScheduling)
    {
        colour = "beige";
    }
    if (message.Status == MessageStatusTracking.Scheduled)
    {
        colour = "orange";
    }
    if (message.Status == MessageStatusTracking.CompletedSuccess)
    {
        colour = "green";
    }
    if (message.Status == MessageStatusTracking.CompletedFailure)
    {
        colour = "red";
    }
    <li style="border-left: 5px solid @colour; margin-bottom: 10px; padding-left: 5px; list-style-type: none;">
        Number: @message.Number<br/>
        Status: @message.Status.ToString()<br />
        @switch(message.Status)
        {
            case MessageStatusTracking.CompletedSuccess:
            {
                @: Time Sent: @message.ActualSentTimeUtc.Value <br />
                @: Cost: $@message.Cost <br />
                break;
            }
            case MessageStatusTracking.CompletedFailure:
            {
                @: Sending Failed: <a href="@message.FailureData.MoreInfo">@message.FailureData.Message</a> <br />
                break;
            }
            default:
            {
                @: ScheduledTime: @message.ScheduledSendingTimeUtc.ToLocalTime() <br />
                break;
            }
        }
        
    </li>
}
</ul>