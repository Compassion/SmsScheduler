@using SmsTrackingModels
@model CoordinatorTrackingData

@{
    ViewBag.Title = "title";
    Layout = "~/Views/shared/_BootstrapLayout.basic.cshtml";
}
<script type="text/javascript">
    $(function () {      
        var schedule = $.connection.scheduleStatus;

        schedule.client.updateSchedule = function (message) {
            $('#' + message.ScheduleId).html(message.Body);
            $('#' + message.ScheduleId).removeClass();
            $('#' + message.ScheduleId).addClass(message.Class);
        };

        schedule.client.scheduleSent = function (message) {
            var scheduleBody = "Number: " + message.Number + " </br>" +
                "Status: Completed Success <br/> " +
                "Time Sent: " + message.SentAt + " <br />" +
                "Cost: " + message.Cost;
            $('#' + message.ScheduleId).html(scheduleBody);
            $('#' + message.ScheduleId).removeClass();
            $('#' + message.ScheduleId).addClass(message.Class);
        };
        
        schedule.client.scheduleFailed = function (message) {
            var scheduleBody = "Number: " + message.Number + " </br>" +
                "Status: Completed Failure <br/> " +
                "Sending Failed: " + message.SendFailedMessage;
            $('#' + message.ScheduleId).html(scheduleBody);
            $('#' + message.ScheduleId).removeClass();
            $('#' + message.ScheduleId).addClass(message.Class);
        };
        
        schedule.client.messageScheduled = function (message) {
            var scheduleBody = "Number: " + message.Number + " </br>" +
                "Status: Scheduled <br/> " +
                "Scheduled Time: " + message.ScheduledTime;
            $('#' + message.ScheduleId).html(scheduleBody);
            $('#' + message.ScheduleId).removeClass();
            $('#' + message.ScheduleId).addClass(message.Class);
        };
        
        schedule.client.messagePaused = function (message) {
            var scheduleBody = "Number: " + message.Number + " </br>" +
                "Status: Paused <br/> ";
            $('#' + message.ScheduleId).html(scheduleBody);
            $('#' + message.ScheduleId).removeClass();
            $('#' + message.ScheduleId).addClass(message.Class);
        };
        
        schedule.client.coordinatorCompleted = function (message) {
            var coordinatorSummary = "<div>Current Status: Complete</div>" +
                "<div>Completion Date: " + message.CompletedAt + "</div>";
            $('#' + message.CoordinatorId).html(coordinatorSummary);
        };

        // Start the connection
        $.connection.hub.start().done(function() {
            $("#broadcast").click(function () {
                // Call the chat method on the server
                status.server.send($('#msg').val());
            });
        });
    });
</script>


<h2>Coordinated Messages</h2>
<div>ID : @Model.CoordinatorId</div>

<div id="@Model.CoordinatorId">
    <div>Current Status: @Model.CurrentStatus.ToString()</div>
    @if (Model.CurrentStatus != CoordinatorStatusTracking.Completed)
    {
        if (Model.CurrentStatus == CoordinatorStatusTracking.Started)
        {
            <div>
                @using(Html.BeginForm("Pause", "Coordinator"))
                {
                    @Html.HiddenFor(m => m.CoordinatorId)
                @*<label>Pause message sending</label>*@
                    <input type="submit" value="Pause Message Sending"/>
                }
            </div>
        }
        if (Model.CurrentStatus == CoordinatorStatusTracking.Paused)
        {
            <div>
                @using(Html.BeginForm("Resume", "Coordinator"))
                {
                    @Html.HiddenFor(m => m.CoordinatorId)
                    <label>Time to resume</label>
                    <input name="timeToResume" type="datetime-local" value="@DateTime.Now"/>
                    <input type="submit" value="Resume Messages"/>
                }
            </div>
        }
    }
    @if(Model.CompletionDateUtc.HasValue)
    {
        <div>Completion Date: @Model.CompletionDateUtc.Value.ToLocalTime()</div>
    }
</div>
<ul>
@foreach(var message in Model.MessageStatuses)
{
    var liClass = "";
    if (message.Status == MessageStatusTracking.WaitingForScheduling){ liClass = "waitingforschedule"; }
    if (message.Status == MessageStatusTracking.Scheduled){ liClass = "scheduled"; }
    if (message.Status == MessageStatusTracking.Paused){ liClass = "paused"; }
    if (message.Status == MessageStatusTracking.CompletedSuccess) { liClass = "success"; }
    if (message.Status == MessageStatusTracking.CompletedFailure) { liClass = "fail"; }
    <li class="@liClass" id="@message.ScheduleMessageId">
        Number: @message.Number<br/>
        Status: @message.Status.ToString()<br />
        @switch(message.Status)
        {
            case MessageStatusTracking.CompletedSuccess:
            {
                @: Time Sent: @message.ActualSentTimeUtc.Value.ToLocalTime() <br />
                @: Cost: $@message.Cost <br />
                break;
            }
            case MessageStatusTracking.CompletedFailure:
            {
                @: Sending Failed: <a href="@message.FailureData.MoreInfo">@message.FailureData.Message</a> <br />
                break;
            }
            default:
            {
                @: ScheduledTime: @message.ScheduledSendingTimeUtc.ToLocalTime() <br />
                break;
            }
        }
        
    </li>
}
</ul>